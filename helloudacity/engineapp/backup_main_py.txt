#!/usr/bin/env python
#
# Copyright 2007 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import webapp2

import cgi

import jinja2

import os

from classes.CustomTools import Tools

from classes.rot13 import Hello

from classes.URL_mapper import urlMapper

from classes.ResponseWrite import jinjaWriter

urlMapping=[]

form="""<!DOCTYPE html><html><head><title>ROT13</title></head><body><form method=post>
<div style="font-size:50px;color: #6746b4;background-color: #b0c4de7d;font-style: italic;">Enter Text for ROT13...</div>
<textarea name="txtarea" style="height:400px;width:100%;">%s</textarea>
<input type="submit">
</form></body></html>"""

Drot={}
params=''
lnDrot=0
dtime=''
path=os.path.dirname(__file__)
style=''
template_dir=os.path.join(path,'templates')
jinja_env=jinja2.Environment(loader=jinja2.FileSystemLoader(template_dir),autoescape=True)

jw=jinjaWriter()

class MainHandler(webapp2.RequestHandler):
    def get(self):
        #self.WriteResponse(params)
        # urlMPR=urlMapper()
        # obj=urlMPR.getObject(self.request.environ['PATH_INFO'],urlMapping)
        
        #urlMappingAppend(self.request.environ['PATH_INFO'],obj)
        global style, path
        if style=='':
            style=self.getstyle()
        #self.render('rot13.html',txt="asdf",style=style)
        # self.WriteTemplate('rot13.html',txt="asdf",style=style)
        # jw.WriteTemplate('rot13.html','style_brown.css',txt="alsjfdlas")
        self.response.write(jw.WriteTemplate('rot13.html','style_brown.css',path,txt="alsjfdlas"))
        
    def PassParams(self,template,**kw):
        t=jinja_env.get_template(template)
        return t.render(kw)

    def WriteTemplate(self,template,**kw):
        self.response.write(self.PassParams(template,**kw))

    """def write(self, *a, **kw):
        self.response.out.write(*a,**kw)

    def render_str(self, template, **params):
        t=jinja_env.get_template(template)
        return t.render(params)

    def render(self, template, **kw):
        self.write(self.render_str(template, **kw))"""

    def getstyle(self):
        global style
        style=jinja_env.get_template('style_brown.css')
        return style.render()

    def WriteResponse(self,params):
        tools=Tools()
        global dtime
        self.response.write(form.replace('%s',cgi.escape(params,quote=True))+'lnDrot=%s'%lnDrot+' lnitxt=%s'%str(len(params))+ ' datetime=%s'%tools.RetDateTime()+' datetimediff=%s'%tools.RetDateTimeDiff(dtime))

    def post(self):
        global dtime
        tools=Tools()
        #del tools
        dtime=tools.RetDateTime()
        global style
        if style=='':
            style=self.getstyle()
    	x=self.request.get('txtarea')
        if x:
            x=self.GetRot13(x,len(x))
        else:
            x=''
        #self.WriteResponse(x)
        self.WriteTemplate('rot13.html',style=style,title='ROT13',txt=x)
        self.response.write(dtime)
        del dtime
        try:
            self.response.write(dtime)
        except Exception as err:
            x=MainHandler()
            self.response.write(' Exception Name=%s and Exception=%s and Class=%s'%(type(err).__name__,err,x.__class__.__name__))
            self.response.write('HTTP_ORIGIN=%s'% self.request.environ['HTTP_ORIGIN'])
            self.response.write('HTTP_HOST=%s'% self.request.environ['HTTP_HOST'])
            self.response.write('PATH_INFO=%s'% self.request.environ['PATH_INFO'])
            
    def GetRot13(self,itxt,lnitxt):
        itx=''
        global lnDrot
        if lnDrot==0:
            self.DRot13(ord('a'),ord('z'))
            self.DRot13(ord('A'),ord('Z'))
            lnDrot=len(Drot)
        for idx in range(lnitxt):
            if Drot.has_key(itxt[idx]):
                itx+=Drot.get(itxt[idx])
            else:
                itx+=itxt[idx]
        return itx

    def DRot13(self,first,last):
        for a in range(first,last+1):
            if ((a+13) <= last):
                Drot[chr(a)]=chr(a+13)
            else:
                Drot[chr(a)]=chr(a-13)
y=Hello()
x=MainHandler()
urlMapping=[('/', x.__class__)]


"""tu=('/hello',y.__class__)"""


"""urlMapping.append(tu)"""
#urlMapping=[('/', MainHandler)]


def urlMappingAppend(path,objRecieved):
    global urlMapping
    tu=(path,objRecieved.__class__)
    urlMapping.append(tu)

urlMappingAppend('/hello',y)


app = webapp2.WSGIApplication(urlMapping, debug=True)
